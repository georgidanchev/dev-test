{%- assign product_obj = all_products['antique-drawers'] -%}
{%- assign product_variant_id = product_obj.selected_or_first_available_variant.id -%}

<section class="page-width">
  {%- capture product_pricing -%}
    <div class="card-information">
      {%- if show_vendor -%}
        <span class="visually-hidden">{{ 'accessibility.vendor' | t }}</span>
        <div class="caption-with-letter-spacing light">{{ card_product.vendor }}</div>
      {%- endif -%}

      <span class="caption-large light">{{ block.settings.description | escape }}</span>

      {%- if show_rating and card_product.metafields.reviews.rating.value != blank -%}
        {% liquid
          assign rating_decimal = 0
          assign decimal = card_product.metafields.reviews.rating.value.rating | modulo: 1
          if decimal >= 0.3 and decimal <= 0.7
            assign rating_decimal = 0.5
          elsif decimal > 0.7
            assign rating_decimal = 1
          endif
        %}
        <div
          class="rating"
          role="img"
          aria-label="{{ 'accessibility.star_reviews_info' | t: rating_value: card_product.metafields.reviews.rating.value, rating_max: card_product.metafields.reviews.rating.value.scale_max }}"
        >
          <span
            aria-hidden="true"
            class="rating-star"
            style="--rating: {{ card_product.metafields.reviews.rating.value.rating | floor }}; --rating-max: {{ card_product.metafields.reviews.rating.value.scale_max }}; --rating-decimal: {{ rating_decimal }};"
          ></span>
        </div>
        <p class="rating-text caption">
          <span aria-hidden="true">
            {{- card_product.metafields.reviews.rating.value -}} /
            {{- card_product.metafields.reviews.rating.value.scale_max -}}
          </span>
        </p>
        <p class="rating-count caption">
          <span aria-hidden="true">({{ card_product.metafields.reviews.rating_count }})</span>
          <span class="visually-hidden">
            {{- card_product.metafields.reviews.rating_count -}}
            {{- 'accessibility.total_reviews' | t -}}
          </span>
        </p>
      {%- endif -%}

      {% render 'price', product: card_product, price_class: '' %}
    </div>
  {%- endcapture -%}

  <div class="product-card">
    <div class="product-card__image-wrap" onclick="addToCart({{product_variant_id}})">
      <img src="{{ product_obj.featured_image | img_url: '200x' }}" alt="{{ product_obj.featured_image.alt }}">
    </div>

    <div class="product-card__text-wrap" onclick="addToCart({{product_variant_id}})">
      <h3 class="product-card__title card__heading h5">{{ product_obj.title }}</h3>

      {{ product_pricing }}

      <button type="button" data-cta-button data-default-text="Add to cart">
        Add to cart
      </button>
    </div>
  </div>
</section>

<style>
  /* CSS goes here */
  .page-width {
    max-width: var(--page-width);
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .product-card {
    cursor: pointer;
  }
</style>

<script>
  function addToCart(variant_id) {
    const AddToCartBtn = document.querySelector("[data-cta-button]")
    let timeoutContainer

    const quantity = 1
    const addToCartUrl = `/cart/add.js?quantity=${quantity}&id=${variant_id}`;

    fetch(addToCartUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" }
    })
      .then((response) => {
        if (response.ok) {
          console.log("submitted")
          AddToCartBtn.innerText = "Added to cart"

          clearTimeout(timeoutContainer)

          timeoutContainer = setTimeout(() => {
            AddToCartBtn.innerText = AddToCartBtn.dataset.defaultText
          }, 1000)
        } else {
          AddToCartBtn.innerText = "Error try again later"

          clearTimeout(timeoutContainer)

          timeoutContainer =  setTimeout(() => {
            AddToCartBtn.innerText = AddToCartBtn.dataset.defaultText
          }, 1000)
        }
      })
      .catch((error) => {
        AddToCartBtn.innerText = "Error try again later"

        clearTimeout(timeoutContainer)

        timeoutContainer =  setTimeout(() => {
          AddToCartBtn.innerText = AddToCartBtn.dataset.defaultText
        }, 1000)

        console.error(error)
      })
  }
</script>

{% schema %}
{
  "name": "Product card test",
  "settings": [
  ],
  "presets": [
    {
      "name": "Product card test"
    }
  ]
}
{% endschema %}